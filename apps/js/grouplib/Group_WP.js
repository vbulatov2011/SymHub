import {
  abs,
  sin,
  cos,
  sqrt,
  PI, 
  TORADIANS,
  getParam,
  iPlane, 
  EventProcessor,
  isDefined, 
  iWallpaperGroup, 
  WallpaperGroupNames,
  Group, 
  ParamChoice,
  ParamFloat,
} from './modules.js';


const DEBUG = false;

/*
  provides generators for reflection groups generated by 3 reflections 
*/
export class Group_WP {
	
	
	constructor(opt){
    
        if(!opt)
           opt = {};
        
        this.params = {
          type: getParam(opt.type, '333'),
          a: getParam(opt.a,0.5),
          b: getParam(opt.b,0.5),      
          c: getParam(opt.c,0),      
          angle_a: getParam(opt.angle_a, 0),
          angle_b: getParam(opt.angle_b,90), 
        };		
        
        this.setOptions(opt);
        
        this.mParams = this.makeParams();
	}

    setOptions(opt){
        
        if(opt.onChanged){
            this.onGroupChanged = opt.onChanged;
            this.eventProcessor = new EventProcessor();
            this.eventProcessor.addEventListener('onChanged', this.onGroupChanged);
        }        
    }
  /**
    return map of current parameters 
  */
  /*
  getParamsMap(){
    
    var p = this.params;
    
    return {
      type:p.type,
      a:p.a,
      b:p.b,
      c:p.c,
      angle_a:p.angle_a,
      angle_b:p.angle_b,
    };
  }
  */
  
	/**
        set parameters from saved paramMap 
  */
  /*
  setParamsMap(paramsMap){
    
    var ctr = this.controllers;
    if(isDefined(ctr)){
      ctr.type.setValue(getParam(paramsMap.type,'*442'));
      ctr.a.setValue(getParam(paramsMap.a,0.5));
      ctr.b.setValue(getParam(paramsMap.b,0.5));
      ctr.c.setValue(getParam(paramsMap.c,1));
      ctr.angle_a.setValue(getParam(paramsMap.angle_a,0.));
      ctr.angle_b.setValue(getParam(paramsMap.angle_b,90.));
    } else {
      this.params = Object.assign(this.params, paramsMap);
    }
  }
    */
	/*
    initGUI(options){

        var folder = options.folder; 

        //var onc = options.onChanged;
        if(DEBUG)console.log(this.constructor.name + '.initGUI()', 'options.onChanged:', options.onChanged);
        if(isDefined(options.onChanged)){
          if(DEBUG)console.log(this.constructor.name + ' creating EventProcessor');
          this.eventProcessor = new EventProcessor();
          this.eventProcessor.addEventListener('onChanged', options.onChanged);
        }

        var opc = this.onParamChanged.bind(this);

        var par = this.params;
        var inc = 1.e-10;
        this.controllers = {};
        var ctr = this.controllers;
        ctr.type = folder.add(par, 'type', WallpaperGroupNames).onChange(opc);
        ctr.a = folder.add(par, 'a', 0.001, 20, inc).onChange(opc);
        ctr.b = folder.add(par, 'b', 0.001, 20, inc).onChange(opc);
        ctr.c = folder.add(par, 'c', -1, 1, inc).onChange(opc);
        ctr.angle_a = folder.add(par, 'angle_a', -180, 180, inc).onChange(opc);
        ctr.angle_b = folder.add(par, 'angle_b', -180, 180, inc).onChange(opc);
           
    }
    */
  
  //createUI(folder){
  //  this.initGUI({folder: folder, onChanged:this.onGroupChanged });
  //}
  
  //
  // called from UI when any group param was changed 
  //
  onParamChanged(){
    if(DEBUG)console.log(this.constructor.name + '.onParamChanged()', 'eventProcessor:', this.eventProcessor);
    if(this.eventProcessor)
      this.eventProcessor.handleEvent({type:'onChanged', target: this});
    
  }
    
  /*  
  getEventProcessor(){
    
    return this.eventProcessor;
    
  }
  */
	//
	//  return group description
	//
	getGroup(){
    
    var pm = this.params;
    let oldGroup = iWallpaperGroup({name: pm.type,
                                      a:pm.a, 
                                      b:pm.b, 
                                      c:pm.c, 
                                      angle_a:pm.angle_a*TORADIANS, 
                                      angle_b:pm.angle_b*TORADIANS, 
                                    })
		return new Group(oldGroup);
		
	}

    makeParams(){
        var par = this.params;
        var opc = this.onParamChanged.bind(this);
        var inc = 0.00000001;
        
        return {
          type: 
                ParamChoice({
                      obj:   par,
                      key:  'type',                      
                      name: 'group type',
                      choice:   WallpaperGroupNames,
                      onChange: opc,
                }),
           a: 
                ParamFloat({
                    obj: par,
                    key: 'a',
                    //name: ''
                    min: 0.0001, max: 100, step: inc,
                    onChange: opc,
                }),
           b: 
                ParamFloat({
                    obj: par,
                    key: 'b',
                    //name: ''
                    min: 0.0001, max: 100, step: inc,
                    onChange: opc,
                }),
           c: 
                ParamFloat({
                    obj: par,
                    key: 'c',
                    //name: ''
                    min: -1, max: 1, step: inc,
                    onChange: opc,
                }),
           angle_a:
                ParamFloat({
                    obj: par,
                    key: 'angle_a',
                    //name: ''
                    name: 'angle a (deg)',
                    min: -180, max: 180, step: inc,
                    onChange: opc,
                }),
           angle_b:
                ParamFloat({
                    obj: par,
                    key: 'angle_b',
                    //name: ''
                    name: 'angle b (deg)',
                    min: -180, max: 180, step: inc,
                    onChange: opc,
                }),                  
        };
    }
	
    //
    //  return copy of this group maker 
    //
    getCopy(){

        return new Group_WP(Object.assign({}, this.params));

    }
  
  //
  //  return external params 
  //
  getParams(){
      return this.mParams;
      
  }
  

} // class Group_WP